import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

import org.apache.tools.ant.taskdefs.condition.Os

task ndkBuild(type: Exec,description: 'run ndk-build') {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        workingDir 'src/main/jni'
        commandLine 'ndk-build.cmd', '-j', Runtime.runtime.availableProcessors()

    } else {
        workingDir 'src/main/jni'
        commandLine "$ndkDir/ndk-build", '-j', Runtime.runtime.availableProcessors()
    }
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn(ndkBuild)
}

def getVersionCodeFromManifest(String prefix) {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def version = prefix + matcher.group(1)
    println sprintf("Returning version %s", version)
    return Integer.parseInt("$version")
}


android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        //testHandleProfiling true
        //testFunctionalTest true
    }
    signingConfigs {
        release
    }
    buildTypes {
        debug {
            debuggable true
        }
        release {
	        //runProguard true
            proguardFile file('android.pro')
            proguardFile getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.release
        }
    }

    productFlavors {

        x86 {
            versionCode getVersionCodeFromManifest("6")
            ndk {
                abiFilter "x86"
            }

        }
        aV7 {
            versionCode getVersionCodeFromManifest("2")
            ndk {
                abiFilter "armeabi-v7a"
            }
        }
        aV5 {
            versionCode getVersionCodeFromManifest("1")
            ndk {
                abiFilter "armeabi"
            }
        }
    }
    sourceSets {
        main {
            //jniLibs.srcDirs = ['native-libs']
            jniLibs.srcDir 'src/main/libs'
            jni.srcDirs = [] //disable automatic ndk-build
        }
    }
}

def Properties props = new Properties()
def propFile = new File('signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}


dependencies {
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
    compile fileTree(dir: 'src/main/libs', include: '*.jar')

    //hujiawei change viewpagerindicator to another one
    //compile 'com.viewpagerindicator:library:2.4.1@aar'
    compile 'com.mcxiaoke.viewpagerindicator:library:2.4.1@aar'

    compile 'com.github.chrisbanes.photoview:library:1.2.2'
    compile 'com.google.code.findbugs:jsr305:2.0.2'
    compile "com.google.guava:guava:18.0"
    compile 'de.greenrobot:eventbus:2.4.0'
    //compile 'com.android.support:design:22.2.0'
    compile 'com.nineoldandroids:library:2.4.0'
    //hujiawei 19.0+ -> 21.0+
    compile 'com.android.support:appcompat-v7:21.0.+'
    compile 'org.apache.commons:commons-compress:1.5'
    compile project(":tess-two:tess-two")
    compile 'com.android.support:cardview-v7:21.0.+'

    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.0'
    androidTestCompile 'com.google.dexmaker:dexmaker:1.0'
    androidTestCompile 'org.mockito:mockito-core:1.10.17'
    androidTestCompile 'junit:junit:4.12'

    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-all:1.10.19"
    testCompile("org.robolectric:robolectric:3.0-rc2") {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    compile('com.crashlytics.sdk.android:crashlytics:2.5.0@aar') {
        transitive = true;
    }


}